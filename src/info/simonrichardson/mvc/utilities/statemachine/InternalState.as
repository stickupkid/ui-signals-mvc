package info.simonrichardson.mvc.utilities.statemachine
{
	import info.simonrichardson.errors.ElementAlreadyExistsError;
	import info.simonrichardson.mvc.IProxyVO;

	/**
	 * @author Simon Richardson - simon@ustwo.co.uk
	 */
	public final class InternalState implements IProxyVO
	{

		private var _parent : State;

		private var _name : String;

		private var _notification : String;

		private var _transitions : Vector.<StateTransition>;

		private var _autoGenerated : Boolean;

		public function InternalState(name : String, notification : String)
		{
			if (null == name)
			{
				throw new ArgumentError("Name can not be null");
			}

			if (null == notification)
			{
				throw new ArgumentError("Notification can not be null");
			}

			_name = name;
			_notification = notification;
			_transitions = new Vector.<StateTransition>();

			_autoGenerated = false;
		}

		public function createTransition(action : String, target : String, internalTarget : String) : StateTransition
		{
			if (getTransitionByAction(action) != null)
			{
				throw new ElementAlreadyExistsError();
			}

			return new StateTransition(action, target, internalTarget);
		}

		public function addTransition(transition : StateTransition) : StateTransition
		{
			if (getTransitionByAction(transition.action) != null)
			{
				throw new ElementAlreadyExistsError();
			}

			_transitions.push(transition);

			return transition;
		}

		public function getTransitionByAt(index : int) : StateTransition
		{
			if (index < 0 || index > _transitions.length)
			{
				throw new RangeError();
			}
			return _transitions[index];
		}

		public function getTransitionByAction(action : String) : StateTransition
		{
			var index : int = _transitions.length;
			while (--index > -1)
			{
				const transition : StateTransition = _transitions[index];
				if (transition.action == action)
				{
					return transition;
				}
			}
			return null;
		}

		public function clone() : IProxyVO
		{
			const internalState : InternalState = new InternalState(name, notification);
			internalState._transitions = _transitions.slice();
			return internalState;
		}

		public function get numTransitions() : int
		{
			return _transitions.length;
		}

		public function get name() : String
		{
			return _name;
		}

		public function get notification() : String
		{
			return _notification;
		}

		public function get autoGenerated() : Boolean
		{
			return _autoGenerated;
		}

		public function set autoGenerated(autoGenerated : Boolean) : void
		{
			_autoGenerated = autoGenerated;
		}

		internal function get parent() : State
		{
			return _parent;
		}

		internal function set parent(parent : State) : void
		{
			_parent = parent;
		}

		public function dispose() : void
		{
			if (null != _transitions)
			{
				_transitions = null;
			}

			_parent = null;
		}

		public function toString() : String
		{
			return "[InternalState (name=" + name + ", notification=" + notification + ", generated=" + autoGenerated + ", transitions=" + _transitions + ")]";
		}
	}
}
