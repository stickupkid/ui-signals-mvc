package info.simonrichardson.mvc.utilities.statemachine
{
	import info.simonrichardson.errors.ElementAlreadyExistsError;
	import info.simonrichardson.errors.NoSuchElementError;
	import info.simonrichardson.mvc.IProxyVO;

	/**
	 * @author Simon Richardson - me@simonrichardson.info
	 */
	public final class State implements IProxyVO
	{

		private static const requiredStates : Vector.<String> = new <String>["added"];

		private var _name : String;

		private var _notification : String;

		private var _initial : String;

		private var _internalStates : Vector.<InternalState>;

		private var _currentInternalState : InternalState;

		private var _autoGenerateMissingStates : Boolean;

		public function State(name : String, notification : String, initial : String = null)
		{
			if (null == name)
			{
				throw new ArgumentError("Name can not be null");
			}

			_name = name;
			_notification = notification;
			_initial = initial;
			
			if (null == initial || initial == "")
			{
				_initial = requiredStates[0];
			}

			_internalStates = new Vector.<InternalState>();

			_autoGenerateMissingStates = true;
		}

		public function createInternalState(name : String, notification : String) : InternalState
		{
			if (getInternalStateByName(name) != null)
			{
				throw new ElementAlreadyExistsError();
			}

			const internalState : InternalState = new InternalState(name, notification);
			internalState.parent = this;
			return internalState;
		}

		public function addInternalState(state : InternalState) : InternalState
		{
			if (getInternalStateByName(name) != null)
			{
				throw new ElementAlreadyExistsError();
			}

			_internalStates.push(state);

			return state;
		}

		public function getInternalStateAt(index : int) : InternalState
		{
			if (index < 0 || index >= _internalStates.length)
			{
				throw new RangeError();
			}

			return _internalStates[index];
		}

		public function removeInternalState(state : InternalState) : InternalState
		{
			const index : int = getInternalStateIndex(state);
			if (index == -1)
			{
				throw new NoSuchElementError();
			}

			_internalStates.splice(index, 1);

			return state;
		}

		public function getInternalStateByName(name : String) : InternalState
		{
			var index : int = _internalStates.length;
			while (--index > -1)
			{
				if (_internalStates[index].name == name)
				{
					return _internalStates[index];
				}
			}
			return null;
		}

		public function getInternalStateIndex(state : InternalState) : int
		{
			return _internalStates.indexOf(state);
		}

		public function clone() : IProxyVO
		{
			const state : State = new State(name, notification);
			state._internalStates = _internalStates.slice();
			return state;
		}

		internal function build() : void
		{
			if (_autoGenerateMissingStates)
			{
				generateMissingStates();
			}
		}

		private function generateMissingStates() : void
		{
			const required : Vector.<String> = requiredStates.slice();

			var internalState : InternalState;

			var index : int = _internalStates.length;
			while (--index > -1)
			{
				internalState = _internalStates[index];
				if (required.indexOf(internalState.name.toLowerCase()) >= 0)
				{
					required.splice(index, 1);
				}
			}
			
			required.reverse();
			
			index = required.length;
			while (--index > -1)
			{
				const requiredName : String = required[index];
				const requiredNotification : String = name.toUpperCase() + "_" + requiredName.toUpperCase() + "_NOTIFICATION";

				internalState = createInternalState(requiredName, requiredNotification);
				internalState.parent = this;
				internalState.autoGenerated = true;

				addInternalState(internalState);
			}
		}

		public function get numInternalStates() : int
		{
			return _internalStates.length;
		}

		public function get name() : String
		{
			return _name;
		}

		public function get notification() : String
		{
			return _notification;
		}

		public function get initial() : String
		{
			return _initial;
		}

		public function get autoGenerateMissingStates() : Boolean
		{
			return _autoGenerateMissingStates;
		}

		public function set autoGenerateMissingStates(value : Boolean) : void
		{
			if (_autoGenerateMissingStates != value)
			{
				_autoGenerateMissingStates = value;

				if (value)
				{
					generateMissingStates();
				}
			}
		}

		public function get currentInternalState() : InternalState
		{
			return _currentInternalState;
		}

		public function set currentInternalState(value : InternalState) : void
		{
			if(_currentInternalState != value)
			{
				_currentInternalState = value;
			}
		}

		public function dispose() : void
		{
		}

		public function toString() : String
		{
			return "[State (name=" + name + ", initial=" + initial + ", states=" + _internalStates + ")]";
		}
	}
}
